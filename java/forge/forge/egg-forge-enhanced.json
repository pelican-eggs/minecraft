{
    "_comment": "DO NOT EDIT: FILE GENERATED AUTOMATICALLY BY PANEL",
    "meta": {
        "version": "PLCN_v1",
        "update_url": null
    },
    "exported_at": "2025-03-09T04:50:53+00:00",
    "name": "Forge",
    "author": "sudsy327@gmail.com",
    "uuid": "1c66d945-8129-4f09-b9dc-fcd9ab521c7d",
    "description": "Minecraft Forge Server. Minecraft Forge is a modding API (Application Programming Interface), which makes it easier to create mods, and also make sure mods are compatible with each other.",
    "features": [
        "eula",
        "java_version",
        "pid_limit"
    ],
    "docker_images": {
        "Java 21": "ghcr.io\/parkervcp\/yolks:java_21"
    },
    "file_denylist": [],
    "startup": "java -Xms128M -Dterminal.jline=false -Dterminal.ansi=true $( [[  ! -f unix_args.txt ]] && printf %s \"-jar {{SERVER_JARFILE}}\" || printf %s \"@unix_args.txt\" )",
    "config": {
        "files": "{\n    \"server.properties\": {\n        \"parser\": \"properties\",\n        \"find\": {\n            \"server-ip\": \"0.0.0.0\",\n            \"server-port\": \"{{server.allocations.default.port}}\",\n            \"query.port\": \"{{server.allocations.default.port}}\"\n        }\n    }\n}",
        "startup": "{\n    \"done\": \")! For help, type \"\n}",
        "logs": "{}",
        "stop": "stop"
    },
    "scripts": {
        "installation": {
            "script": "#!\/bin\/bash\r\n# Forge Installation Script\r\n#\r\n# Server Files: \/mnt\/server\r\napt update\r\napt install -y curl jq\r\n\r\nif [[ ! -d \/mnt\/server ]]; then\r\n  mkdir \/mnt\/server\r\nfi\r\n\r\ncd \/mnt\/server\r\n\r\n# Remove spaces from the version number to avoid issues with curl\r\nFORGE_VERSION=\"$(echo \"$FORGE_VERSION\" | tr -d ' ')\"\r\nMC_VERSION=\"$(echo \"$MC_VERSION\" | tr -d ' ')\"\r\nif [ -z ${SERVER_JARFILE} ]; then \r\n  SERVER_JARFILE=server.jar\r\nfi\r\n\r\n# Extract Minecraft version number (1.X.Y) and convert to integer\r\n# URLs for Forge installers 1.10.Y and above are consistent \r\nX=$(echo \"$MC_VERSION\" | cut -d '.' -f 2)\r\nX_INT=$((X))\r\nY=$(echo \"$MC_VERSION\" | cut -d '.' -f 3)\r\nY_INT=$((Y))\r\n\r\n# Script will not work for Forge downloads without installer.jar files (Below mc version 1.5.2)\r\n# Raise exception if MC_VERSION is earlier than 1.5.2\r\nif [[ \" 1.5.1 1.5 \" =~ \" ${MC_VERSION} \" ]] || ( [[ $X_INT -lt 5 ]] && [[ \"${MC_VERSION}\" != \"latest\" ]] ); then\r\n  echo -e \"Script does not support Minecraft versions below 1.5.2\"\r\n  exit 1\r\nfi\r\n\r\nif [[ ! -z ${FORGE_VERSION} ]] && [[ $X_INT -gt 10 ]]; then\r\n  DOWNLOAD_LINK=https:\/\/maven.minecraftforge.net\/net\/minecraftforge\/forge\/${MC_VERSION}-${FORGE_VERSION}\/\r\n  FORGE_JAR=forge-${MC_VERSION}-${FORGE_VERSION}-installer.jar\r\nelse\r\n    JSON_DATA=$(curl -sSL https:\/\/files.minecraftforge.net\/maven\/net\/minecraftforge\/forge\/promotions_slim.json)\r\n\r\n  if [[ \"${MC_VERSION}\" == \"latest\" ]] || [[ \"${MC_VERSION}\" == \"\" ]]; then\r\n    echo -e \"getting latest version of forge.\"\r\n    MC_VERSION=$(echo -e ${JSON_DATA} | jq -r '.promos | del(.\"latest-1.7.10\") | del(.\"1.7.10-latest-1.7.10\") | to_entries[] | .key | select(contains(\"latest\")) | split(\"-\")[0]' | sort -t. -k 1,1n -k 2,2n -k 3,3n -k 4,4n | tail -1)\r\n    BUILD_TYPE=latest\r\n  fi\r\n\r\n  if [[ \"${BUILD_TYPE}\" != \"recommended\" ]] && [[ \"${BUILD_TYPE}\" != \"latest\" ]]; then\r\n    BUILD_TYPE=recommended\r\n  fi\r\n\r\n  echo -e \"minecraft version: ${MC_VERSION}\"\r\n  echo -e \"build type: ${BUILD_TYPE}\"\r\n\r\n  ## some variables for getting versions and things\r\n  FILE_SITE=https:\/\/maven.minecraftforge.net\/net\/minecraftforge\/forge\/\r\n  VERSION_KEY=$(echo -e ${JSON_DATA} | jq -r --arg MC_VERSION \"${MC_VERSION}\" --arg BUILD_TYPE \"${BUILD_TYPE}\" '.promos | del(.\"latest-1.7.10\") | del(.\"1.7.10-latest-1.7.10\") | to_entries[] | .key | select(contains($MC_VERSION)) | select(contains($BUILD_TYPE))')\r\n\r\n  ## locating the forge version\r\n  if [[ \"${VERSION_KEY}\" == \"\" ]] && [[ \"${BUILD_TYPE}\" == \"recommended\" ]]; then\r\n    echo -e \"dropping back to latest from recommended due to there not being a recommended version of forge for the mc version requested.\"\r\n    VERSION_KEY=$(echo -e ${JSON_DATA} | jq -r --arg MC_VERSION \"${MC_VERSION}\" '.promos | del(.\"latest-1.7.10\") | del(.\"1.7.10-latest-1.7.10\") | to_entries[] | .key | select(contains($MC_VERSION)) | select(contains(\"latest\"))')\r\n  fi\r\n\r\n  ## Error if the mc version set wasn't valid.\r\n  if [ \"${VERSION_KEY}\" == \"\" ] || [ \"${VERSION_KEY}\" == \"null\" ]; then\r\n    echo -e \"The install failed because there is no valid version of forge for the version of minecraft selected.\"\r\n    exit 1\r\n  fi\r\n\r\n  FORGE_VERSION=$(echo -e ${JSON_DATA} | jq -r --arg VERSION_KEY \"$VERSION_KEY\" '.promos | .[$VERSION_KEY]')\r\n\r\n  # Forge versions below 1.5.2 don't have an installer, so the script won't work.\r\n  # I don't really know how to install forge pre 1.5.2 so I will have versions below this raise an exception\r\n  # But I will define the download links if someone else updates this script to work with pre 1.5.2\r\n\r\n  # URL format for 1.1, 1.2.3, 1.2.4, 1.2.5\r\n  # Here the URL ends in server-zip\r\n  if [[ \" 1.1 1.2.3 1.2.4 1.2.5 \" =~ \" ${MC_VERSION} \" ]]; then\r\n    DOWNLOAD_LINK=${FILE_SITE}${MC_VERSION}-${FORGE_VERSION}\/\r\n    FORGE_JAR=forge-${MC_VERSION}-${FORGE_VERSION}-server.zip\r\n\r\n  # URL format for 1.3.2, 1.4.0, 1.4.1, 1.4.2, 1.4.3, 1.4.4, 1.4.5, 1.4.6, 1.4.7, 1.5, 1.5.1\r\n  # Here the URL ends in -universal.zip\r\n  elif [[ \" 1.3.2 1.4.0 1.4.1 1.4.2 1.4.3 1.4.4 1.4.5 1.4.6 1.4.7 1.5 1.5.1 \" =~ \" ${MC_VERSION} \" ]]; then\r\n    DOWNLOAD_LINK=${FILE_SITE}${MC_VERSION}-${FORGE_VERSION}\/\r\n    FORGE_JAR=forge-${MC_VERSION}-${FORGE_VERSION}-universal.zip\r\n\r\n  # URL format for 1.7.2\r\n  # The mc172 makes this unique\r\n  elif [[ \"1.7.2\" == \"${MC_VERSION}\" ]]; then\r\n    DOWNLOAD_LINK=https:\/\/maven.minecraftforge.net\/net\/minecraftforge\/forge\/1.7.2-10.12.2.1161-mc172\/forge-1.7.2-10.12.2.1161-mc172-installer.jar\r\n    FORGE_JAR=\"\"\r\n\r\n  # URL format for 1.7.10_pre4\r\n  # Weird prerelease version\r\n  elif [[ \"1.7.10_pre4\" == \"${MC_VERSION}\" ]]; then\r\n    DOWNLOAD_LINK=https:\/\/maven.minecraftforge.net\/net\/minecraftforge\/forge\/1.7.10_pre4-10.12.2.1149-prerelease\/forge-1.7.10_pre4-10.12.2.1149-prerelease-installer.jar\r\n    FORGE_JAR=\"\"\r\n\r\n  # URL format for 1.7.10, 1.8.9, 1.9.4, 1.10.0\r\n  # For these the URL has extra MC_VERSION numbers\r\n  elif [[ \" 1.7.10 1.8.9 1.9.4 1.10.0 \" =~ \" ${MC_VERSION} \" ]]; then\r\n    DOWNLOAD_LINK=${FILE_SITE}${MC_VERSION}-${FORGE_VERSION}-${MC_VERSION}\/\r\n    FORGE_JAR=forge-${MC_VERSION}-${FORGE_VERSION}-${MC_VERSION}-installer.jar\r\n\r\n  # URL format for 1.5.2, 1.6.1, 1.6.2, 1.6.3, 1.6.4, 1.8, 1.8.8, 1.9 and above 1.10.0\r\n  else [[ \" 1.5.2 1.6.1 1.6.2 1.6.3 1.6.4 1.8 1.8.8 1.9 \" =~ \" ${MC_VERSION} \" ]] || [[ $X_INT -gt 10 ]]\r\n    DOWNLOAD_LINK=${FILE_SITE}${MC_VERSION}-${FORGE_VERSION}\/\r\n    FORGE_JAR=forge-${MC_VERSION}-${FORGE_VERSION}-installer.jar\r\n  fi\r\nfi\r\n\r\n#Adding .jar when not eding by SERVER_JARFILE\r\nif [[ ! $SERVER_JARFILE = *\\.jar ]]; then\r\n  SERVER_JARFILE=\"$SERVER_JARFILE.jar\"\r\nfi\r\n\r\n#Downloading jars\r\necho -e \"Downloading forge version ${FORGE_VERSION}\"\r\necho -e \"Download link is ${DOWNLOAD_LINK}${FORGE_JAR}\"\r\n\r\nif [[ ! -z \"${DOWNLOAD_LINK}${FORGE_JAR}\" ]]; then\r\n  if curl -sSL --output \/dev\/null --head --fail ${DOWNLOAD_LINK}${FORGE_JAR}; then\r\n    echo -e \"installer jar download link is valid.\"\r\n  else\r\n    echo -e \"link is invalid. Exiting now\"\r\n    exit 3\r\n  fi\r\nelse\r\n  echo -e \"no download link provided. Exiting now\"\r\n  exit 4\r\nfi\r\n\r\ncurl -sSL -o installer.jar ${DOWNLOAD_LINK}${FORGE_JAR}\r\n\r\n#Checking if downloaded jars exist\r\nif [[ ! -f .\/installer.jar ]]; then\r\n  echo \"!!! Error downloading forge version ${FORGE_VERSION} !!!\"\r\n  exit 5\r\nfi\r\n\r\nfunction  unix_args {\r\n  echo -e \"Detected Forge 1.17 or newer version. Setting up forge unix args.\"\r\n  ln -sf libraries\/net\/minecraftforge\/forge\/*\/unix_args.txt unix_args.txt\r\n}\r\n\r\n# Delete args to support downgrading\/upgrading\r\nrm -rf libraries\/net\/minecraftforge\/forge\r\nrm unix_args.txt\r\n\r\n# Check Java version\r\necho -e \"Checking java version.\\n\"\r\njava -version\r\n\r\n#Installing server\r\necho -e \"Installing forge server.\\n\"\r\njava -jar installer.jar --installServer || { echo -e \"install failed using Forge version ${FORGE_VERSION} and Minecraft version ${MINECRAFT_VERSION}\"; exit 4; }\r\n\r\nif [ -f ${FORGE_JAR} ]; then\r\n  # For versions below 1.17 that ship with jar\r\n  mv $FORGE_JAR $SERVER_JARFILE\r\nelse\r\n  # Check if we need a symlink for 1.17+ Forge JPMS args\r\n  if [[ $MC_VERSION =~ ^1\\.(17|18|19|20|21|22|23) || $FORGE_VERSION =~ ^1\\.(17|18|19|20|21|22|23) ]]; then\r\n    unix_args\r\n\r\n  # Check if someone has set MC to latest but overwrote it with older Forge version, otherwise we would have false positives\r\n  elif [[ $MC_VERSION == \"latest\" && $FORGE_VERSION =~ ^1\\.(17|18|19|20|21|22|23) ]]; then\r\n    unix_args\r\n  fi\r\nfi\r\n\r\necho -e \"Deleting installer.jar file.\\n\"\r\nrm -rf installer.jar\r\n\r\necho \"-----------------------------------------\"\r\necho \"Installation completed...\"\r\necho \"-----------------------------------------\"\r\n",
            "container": "openjdk:21-jdk-slim",
            "entrypoint": "bash"
        }
    },
    "variables": [
        {
            "name": "Server Jar File",
            "description": "The name of the Jarfile to use when running Forge version below 1.17.",
            "env_variable": "SERVER_JARFILE",
            "default_value": "server.jar",
            "user_viewable": true,
            "user_editable": true,
            "rules": [
                "required",
                "regex:\/^([\\w\\d._-]+)(\\.jar)$\/"
            ],
            "sort": 1
        },
        {
            "name": "Minecraft Version",
            "description": "The version of Minecraft you want to install for.",
            "env_variable": "MC_VERSION",
            "default_value": "latest",
            "user_viewable": true,
            "user_editable": true,
            "rules": [
                "required",
                "string",
                "max:9"
            ],
            "sort": 2
        },
        {
            "name": "Build Type",
            "description": "The type of server jar to download from forge.",
            "env_variable": "BUILD_TYPE",
            "default_value": "recommended",
            "user_viewable": true,
            "user_editable": true,
            "rules": [
                "required",
                "string",
                "in:recommended,latest"
            ],
            "sort": 3
        },
        {
            "name": "Forge Version",
            "description": "Gets an exact version.\n",
            "env_variable": "FORGE_VERSION",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": [
                "nullable",
                "string",
                "max:32"
            ],
            "sort": 4
        }
    ]
}